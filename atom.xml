<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>corly note</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://corly.cc/"/>
  <updated>2019-04-20T12:16:07.591Z</updated>
  <id>http://corly.cc/</id>
  
  <author>
    <name>corly</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据流重定向（Redirection）</title>
    <link href="http://corly.cc/2017/03/09/%E6%95%B0%E6%8D%AE%E6%B5%81%E9%87%8D%E5%AE%9A%E5%90%91Redirection/"/>
    <id>http://corly.cc/2017/03/09/数据流重定向Redirection/</id>
    <published>2017-03-09T04:02:00.000Z</published>
    <updated>2019-04-20T12:16:07.591Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;数据流重导向可以将 standard output (简称 stdout) 与 standard error output (简称 stderr)
        
      
    
    </summary>
    
      <category term="Linux" scheme="http://corly.cc/categories/Linux/"/>
    
    
      <category term="数据重定向" scheme="http://corly.cc/tags/%E6%95%B0%E6%8D%AE%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    
      <category term="linux" scheme="http://corly.cc/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB常用命令</title>
    <link href="http://corly.cc/2017/02/15/MongoDB%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://corly.cc/2017/02/15/MongoDB常用命令/</id>
    <published>2017-02-15T08:05:00.000Z</published>
    <updated>2019-04-20T12:16:07.586Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;query&quot;&gt;&lt;a href=&quot;#query&quot; class=&quot;headerlink&quot; title=&quot;query&quot;&gt;&lt;/a&gt;query&lt;/h2&gt;&lt;p&gt;查询某个字段是否存在&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
      <category term="Linux" scheme="http://corly.cc/categories/Linux/"/>
    
    
      <category term="MongoDB" scheme="http://corly.cc/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>mysql</title>
    <link href="http://corly.cc/2016/12/21/mysql/"/>
    <id>http://corly.cc/2016/12/21/mysql/</id>
    <published>2016-12-21T06:54:00.000Z</published>
    <updated>2019-04-20T12:16:07.549Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;CRUD&quot;&gt;&lt;a href=&quot;#CRUD&quot; class=&quot;headerlink&quot; title=&quot;CRUD&quot;&gt;&lt;/a&gt;CRUD&lt;/h2&gt;&lt;h3 id=&quot;insert&quot;&gt;&lt;a href=&quot;#insert&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="sql" scheme="http://corly.cc/categories/sql/"/>
    
    
      <category term="mysql" scheme="http://corly.cc/tags/mysql/"/>
    
      <category term="sql" scheme="http://corly.cc/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>解决eclipse空格上屏</title>
    <link href="http://corly.cc/2016/07/03/%E8%A7%A3%E5%86%B3eclipse%E7%A9%BA%E6%A0%BC%E4%B8%8A%E5%B1%8F/"/>
    <id>http://corly.cc/2016/07/03/解决eclipse空格上屏/</id>
    <published>2016-07-03T04:31:18.000Z</published>
    <updated>2019-04-20T12:16:07.581Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;下载eclipse源码&quot;&gt;&lt;a href=&quot;#下载eclipse源码&quot; class=&quot;headerlink&quot; title=&quot;下载eclipse源码&quot;&gt;&lt;/a&gt;下载eclipse源码&lt;/h3&gt;&lt;p&gt;首先下载eclipse的源码，地址&lt;a
        
      
    
    </summary>
    
      <category term="java" scheme="http://corly.cc/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL数据导入Solr</title>
    <link href="http://corly.cc/2016/03/15/MySQL%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5Solr/"/>
    <id>http://corly.cc/2016/03/15/MySQL数据导入Solr/</id>
    <published>2016-03-15T02:53:00.000Z</published>
    <updated>2019-04-20T12:16:07.576Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;安装Solr&quot;&gt;&lt;a href=&quot;#安装Solr&quot; class=&quot;headerlink&quot; title=&quot;安装Solr&quot;&gt;&lt;/a&gt;安装Solr&lt;/h2&gt;&lt;p&gt;从&lt;a href=&quot;https://lucene.apache.org&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
      <category term="java" scheme="http://corly.cc/categories/java/"/>
    
    
      <category term="Solr" scheme="http://corly.cc/tags/Solr/"/>
    
      <category term="lucene" scheme="http://corly.cc/tags/lucene/"/>
    
  </entry>
  
  <entry>
    <title>linux job control，工作管理</title>
    <link href="http://corly.cc/2016/02/13/linux%20job%20control%EF%BC%8C%E5%B7%A5%E4%BD%9C%E7%AE%A1%E7%90%86/"/>
    <id>http://corly.cc/2016/02/13/linux job control，工作管理/</id>
    <published>2016-02-13T09:26:00.000Z</published>
    <updated>2019-04-20T12:16:07.570Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;amp&quot;&gt;&lt;a href=&quot;#amp&quot; class=&quot;headerlink&quot; title=&quot;&amp;amp;&quot;&gt;&lt;/a&gt;&amp;amp;&lt;/h2&gt;&lt;p&gt;通过&lt;strong&gt;&amp;amp;&lt;/strong&gt;可以直接将命令丢到背景中运行，比如我们要将 /etc/ 整个备份成为
        
      
    
    </summary>
    
      <category term="Linux" scheme="http://corly.cc/categories/Linux/"/>
    
    
      <category term="job" scheme="http://corly.cc/tags/job/"/>
    
      <category term="守护进程" scheme="http://corly.cc/tags/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>基因序列-算法</title>
    <link href="http://corly.cc/2015/11/15/%E5%9F%BA%E5%9B%A0%E5%BA%8F%E5%88%97-%E7%AE%97%E6%B3%95/"/>
    <id>http://corly.cc/2015/11/15/基因序列-算法/</id>
    <published>2015-11-15T07:07:00.000Z</published>
    <updated>2019-04-20T12:16:07.565Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基因序列由字母G、A、T和C构成的字符串，现要判定一个基因中是否有结构的基因元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入有多组测试数据。每组有2行，第1行是由字母G、A、T和C构成
        
      
    
    </summary>
    
      <category term="算法" scheme="http://corly.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://corly.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>线段与三角形-算法题</title>
    <link href="http://corly.cc/2015/11/15/%E7%BA%BF%E6%AE%B5%E4%B8%8E%E4%B8%89%E8%A7%92%E5%BD%A2-%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    <id>http://corly.cc/2015/11/15/线段与三角形-算法题/</id>
    <published>2015-11-15T02:17:00.000Z</published>
    <updated>2019-04-20T12:16:07.519Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定线段PQ和三角形ABC，求三角形面积并确定线段PQ是否与三角形相交。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有多组测试数据。输入的第一行上有正整数n，表示有n组测试数据。每组测试数据
        
      
    
    </summary>
    
      <category term="算法" scheme="http://corly.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://corly.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>经典排序算法实现</title>
    <link href="http://corly.cc/2015/11/01/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    <id>http://corly.cc/2015/11/01/经典排序算法实现/</id>
    <published>2015-11-01T04:44:00.000Z</published>
    <updated>2019-04-20T12:16:07.559Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span
        
      
    
    </summary>
    
      <category term="算法" scheme="http://corly.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://corly.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>分治与递归-分型</title>
    <link href="http://corly.cc/2015/09/26/%E5%88%86%E6%B2%BB%E4%B8%8E%E9%80%92%E5%BD%92-%E5%88%86%E5%9E%8B/"/>
    <id>http://corly.cc/2015/09/26/分治与递归-分型/</id>
    <published>2015-09-26T02:09:00.000Z</published>
    <updated>2019-04-20T12:16:07.554Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分形在一定的技术意义上说，是在所有标度显示自相似性的一个对象或数量。对象不必在所有标度上展示完全相同的结构，但在所有标度上显示同样的结构“类型”。&lt;br&gt;分型块的定义如下：
        
      
    
    </summary>
    
      <category term="算法" scheme="http://corly.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://corly.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>动态规划-0 1 背包问题</title>
    <link href="http://corly.cc/2015/09/23/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-0%201%20%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>http://corly.cc/2015/09/23/动态规划-0 1 背包问题/</id>
    <published>2015-09-23T08:03:00.000Z</published>
    <updated>2019-04-20T12:16:07.539Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;输入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;测试数据有3行：其第1行上有2个整数n和c，分别是物品个数n和背包所能容纳物品的重量，（n&amp;lt;=50,c&amp;lt;=500），第2行上有n个整数v1、v2、…、vn，依次是n个物品的价值，第3行上有n个整数w1、w2、
        
      
    
    </summary>
    
      <category term="算法" scheme="http://corly.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://corly.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>计算几何03-寻找凸包</title>
    <link href="http://corly.cc/2015/09/19/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%9503-%E5%AF%BB%E6%89%BE%E5%87%B8%E5%8C%85/"/>
    <id>http://corly.cc/2015/09/19/计算几何03-寻找凸包/</id>
    <published>2015-09-19T06:52:00.000Z</published>
    <updated>2019-04-20T12:16:07.532Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;点集Q的凸包ch(Q)是一个最小的凸多边形P，它满足Q中的每个点或者在P的边界上，或者在P的内部。你的任务是对于给定的点集Q，求Q的凸包ch(Q)集。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;&lt;/p&gt;
        
      
    
    </summary>
    
      <category term="java" scheme="http://corly.cc/categories/java/"/>
    
    
      <category term="算法" scheme="http://corly.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="计算机几何" scheme="http://corly.cc/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%87%A0%E4%BD%95/"/>
    
      <category term="凸包" scheme="http://corly.cc/tags/%E5%87%B8%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>计算几何02-用叉积比较极角大小并对点集进行排序</title>
    <link href="http://corly.cc/2015/09/19/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%9502-%E7%94%A8%E5%8F%89%E7%A7%AF%E6%AF%94%E8%BE%83%E6%9E%81%E8%A7%92%E5%A4%A7%E5%B0%8F%E5%B9%B6%E5%AF%B9%E7%82%B9%E9%9B%86%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F/"/>
    <id>http://corly.cc/2015/09/19/计算几何02-用叉积比较极角大小并对点集进行排序/</id>
    <published>2015-09-19T00:20:00.000Z</published>
    <updated>2019-04-20T12:16:07.504Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;一个点 p1 相对于原点 p0 的极角（polar angle）也就是向量 p1-p0 在常规坐标系中的角度。例如，点（3，5）相对于（2，4）的极角即为向量（1，1）的极角，即 45 度或 π/4 弧度。点（3，3）相对于（2，4）的极角即为向量（1，-1）的极角，即
        
      
    
    </summary>
    
      <category term="java" scheme="http://corly.cc/categories/java/"/>
    
    
      <category term="算法" scheme="http://corly.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="叉积" scheme="http://corly.cc/tags/%E5%8F%89%E7%A7%AF/"/>
    
      <category term="计算机几何" scheme="http://corly.cc/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%87%A0%E4%BD%95/"/>
    
      <category term="极角" scheme="http://corly.cc/tags/%E6%9E%81%E8%A7%92/"/>
    
  </entry>
  
  <entry>
    <title>计算几何01-判定两条线段是否相交</title>
    <link href="http://corly.cc/2015/09/16/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%9501-%E5%88%A4%E5%AE%9A%E4%B8%A4%E6%9D%A1%E7%BA%BF%E6%AE%B5%E6%98%AF%E5%90%A6%E7%9B%B8%E4%BA%A4/"/>
    <id>http://corly.cc/2015/09/16/计算几何01-判定两条线段是否相交/</id>
    <published>2015-09-16T08:50:00.000Z</published>
    <updated>2019-04-20T12:16:07.526Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;两条线段相交当且仅当下面两个条件至少成立一个：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.每条线段都跨越了包含另一条线段的直线。&lt;br&gt;2.一条线段的某个端点落在了另一条线段上。（这一情况来自于边界情况）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在判断线段的相交时我们可
        
      
    
    </summary>
    
      <category term="java" scheme="http://corly.cc/categories/java/"/>
    
    
      <category term="算法" scheme="http://corly.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="计算几何学" scheme="http://corly.cc/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%AD%A6/"/>
    
      <category term="叉积" scheme="http://corly.cc/tags/%E5%8F%89%E7%A7%AF/"/>
    
  </entry>
  
  <entry>
    <title>并查集-越多越好</title>
    <link href="http://corly.cc/2015/09/12/%E5%B9%B6%E6%9F%A5%E9%9B%86-%E8%B6%8A%E5%A4%9A%E8%B6%8A%E5%A5%BD/"/>
    <id>http://corly.cc/2015/09/12/并查集-越多越好/</id>
    <published>2015-09-12T12:14:00.000Z</published>
    <updated>2019-04-20T12:16:07.489Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;并查集是一种树型的数据结构，用于处理一些不相交集合（Disjoint Sets）的合并及查询问题。常常在使用中以森林来表示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们先看一个简单的例子：&lt;/p&gt;
&lt;h2 id=&quot;例子：越多越好&quot;&gt;&lt;a
        
      
    
    </summary>
    
      <category term="java" scheme="http://corly.cc/categories/java/"/>
    
    
      <category term="算法" scheme="http://corly.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>判定英文单词中所有的字符是否全都不同</title>
    <link href="http://corly.cc/2015/09/10/%E5%88%A4%E5%AE%9A%E8%8B%B1%E6%96%87%E5%8D%95%E8%AF%8D%E4%B8%AD%E6%89%80%E6%9C%89%E7%9A%84%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E5%85%A8%E9%83%BD%E4%B8%8D%E5%90%8C/"/>
    <id>http://corly.cc/2015/09/10/判定英文单词中所有的字符是否全都不同/</id>
    <published>2015-09-10T12:44:00.000Z</published>
    <updated>2019-04-20T12:16:07.484Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;大家常想到的方法就是构建一个布尔值的数组，索引 i 对应该字符串的第 i 个字符。若这个字符出现第二次，则立即返回 false 。&lt;/p&gt;
&lt;p&gt;下面我们来介绍一种利用位向量（bit vector）来解决的方法。&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
      <category term="java" scheme="http://corly.cc/categories/java/"/>
    
    
      <category term="算法" scheme="http://corly.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux打包命名tar</title>
    <link href="http://corly.cc/2015/08/11/Linux%E6%89%93%E5%8C%85%E5%91%BD%E5%90%8Dtar/"/>
    <id>http://corly.cc/2015/08/11/Linux打包命名tar/</id>
    <published>2015-08-11T09:27:00.000Z</published>
    <updated>2019-04-20T12:16:07.497Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;tar [-j|-z] [cv] [-f 创建的档名] filename…&lt;/strong&gt; &amp;lt;==打包与压缩&lt;br&gt;&lt;strong&gt;tar [-j|-z] [tv] [-f 创建的档名]&lt;/strong&gt;            
        
      
    
    </summary>
    
      <category term="Linux" scheme="http://corly.cc/categories/Linux/"/>
    
    
      <category term="压缩" scheme="http://corly.cc/tags/%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="解压" scheme="http://corly.cc/tags/%E8%A7%A3%E5%8E%8B/"/>
    
  </entry>
  
  <entry>
    <title>工厂方法</title>
    <link href="http://corly.cc/2015/08/10/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/"/>
    <id>http://corly.cc/2015/08/10/工厂方法/</id>
    <published>2015-08-10T00:09:00.000Z</published>
    <updated>2019-04-20T12:16:07.220Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="设计模式" scheme="http://corly.cc/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="编程思想" scheme="http://corly.cc/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件查找</title>
    <link href="http://corly.cc/2015/08/03/Linux%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE/"/>
    <id>http://corly.cc/2015/08/03/Linux文件查找/</id>
    <published>2015-08-03T02:51:00.000Z</published>
    <updated>2019-04-20T12:16:07.467Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在 Linux 下通常 find 不很常用的，因为速度慢（find是直接查找硬盘），通常我们都是先使用 whereis 或者是 locate 来检查，如果真的找不到了，才以 find 来搜寻。 为什么呢？这是因为 Linux
        
      
    
    </summary>
    
      <category term="Linux" scheme="http://corly.cc/categories/Linux/"/>
    
    
      <category term="文件查找" scheme="http://corly.cc/tags/%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>中介者模式</title>
    <link href="http://corly.cc/2015/08/01/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://corly.cc/2015/08/01/中介者模式/</id>
    <published>2015-08-01T10:51:00.000Z</published>
    <updated>2019-04-20T12:16:07.479Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="设计模式" scheme="http://corly.cc/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="编程思想" scheme="http://corly.cc/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
</feed>
